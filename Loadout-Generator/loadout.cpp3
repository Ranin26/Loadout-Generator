#include "loadout.h"

Item::Item(string newName, float newCost, int newRating)
{
	name = newName;
	cost = newCost;
	rating = newRating;
}

string Item::getName()
{
	return name;
}

float Item::getCost()
{
	return cost;
}

int Item::getRating()
{
	return rating;
}

void Item::setName(string newName)
{
	name = newName;
}

void Item::setCost(float newCost)
{
	cost = newCost;
}

void Item::setRating(int newRating)
{
	rating = newRating;
}

Weapon::Weapon(string name, float cost, int dmg, double spd, double dps, int rating) : Item(name, cost, rating)
{
	damage = dmg;
	speed = spd;
	DPS = dps;
}

ofstream& operator << (ofstream& os, Weapon& weapon)
{
	os	<< weapon.getName() << "  " << weapon.getCost() << " Chaos" << "   Rating:" << weapon.getRating() << "\n"
		<< "Damage: " << weapon.getDamage() << "   Attack Speed: " << weapon.getSpeed() << "   DPS: " << weapon.getDPS() << "\n\n";
	return os;
}

int Weapon::getDamage()
{
	return damage;
}

double Weapon::getSpeed()
{
	return speed;
}

double Weapon::getDPS()
{
	return speed*damage;
}

void Weapon::setDamage(int &newDamage)
{
	damage = newDamage;
	calcDPS();
}

void Weapon::setSpeed(double &newSpeed)
{
	speed = newSpeed;
	calcDPS();
}

void Weapon::calcRating()
{
	rating = DPS;
}

void Weapon::calcDPS()
{
	DPS = damage * speed;
}
//Armor

Armor::Armor(string name, float cost, int fres, int eres, int cres, int chres, int arm, int health, int shield, int rating) : Item(name, cost, rating)
{
	fRes = fres;
	eRes = eres;
	cRes = cres;
	chRes = chres;
	armor = arm;
	hp = health;
	es = shield;
}

ofstream& operator << (ofstream& os, Armor& armor)
{
	os << armor.getName() << "  " << armor.getCost() << " Chaos" << "   Rating:" << armor.getRating() << "\n"
		<< "Health: " << armor.getHp() << "   Armor: " << armor.getArmor() << "   Shield: " << armor.getEs() << "\n"
		<< "Fire Res:" << armor.getfRes() << " | Elec Res:" << armor.geteRes() << " | Cold Res:" << armor.getcRes() << " | Chaos Res:" << armor.getchRes() << "\n\n";
	return  os;
}

int Armor::getfRes(){
	return fRes;
}
int Armor::geteRes(){
	return eRes;
}
int Armor::getcRes(){
	return cRes;
}
int Armor::getchRes(){
	return chRes;
}
int Armor::getArmor(){
	return armor;
}
int Armor::getHp(){
	return hp;
}
int Armor::getEs(){
	return es;
}

void Armor::setfRes(int &newFRES){
	fRes = newFRES;
}
void Armor::seteRes(int &newERES){
	eRes = newERES;
}
void Armor::setcRes(int &newCRES){
	cRes = newCRES;
}
void Armor::setchRes(int &newCHRES){
	chRes = newCHRES;
}
void Armor::setArmor(int &newArmor){
	armor = newArmor;
}
void Armor::setHp(int &newHp){
	hp = newHp;
}
void Armor::setEs(int &newEs){
	es = newEs;
}

void Armor::calcRating()
{
	rating = (eRes + fRes + cRes) * 1.6 + chRes * 2.1 + (armor * .3) + hp + es;
}


Jewlry::Jewlry(string name, float cost, int fres, int eres, int cres, int chres, int arm, int health, int shield, int rating) : Item(name, cost, rating)
{
	fRes = fres;
	eRes = eres;
	cRes = cres;
	chRes = chres;
	armor = arm;
	hp = health;
	es = shield;
}

ofstream& operator << (ofstream& os, Jewlry& jewl)
{
	os << jewl.getName() << "  " << jewl.getCost() << " Chaos" << "   Rating:" << jewl.getRating() << "\n"
		<< "Health: " << jewl.getHp() << "   Armor: " << jewl.getArmor() << "   Shield: " << jewl.getEs() << "\n"
		<< "Fire Res:" << jewl.getfRes() << " | Elec Res:" << jewl.geteRes() << " | Cold Res:" << jewl.getcRes() << " | Chaos Res:" << jewl.getchRes() << "\n\n";
	return os;
}

int Jewlry::getfRes(){
	return fRes;
}
int Jewlry::geteRes(){
	return eRes;
}
int Jewlry::getcRes(){
	return cRes;
}
int Jewlry::getchRes(){
	return chRes;
}
int Jewlry::getArmor(){
	return armor;
}
int Jewlry::getHp(){
	return hp;
}
int Jewlry::getEs(){
	return es;
}

void Jewlry::setfRes(int &newFRES){
	fRes = newFRES;
}
void Jewlry::seteRes(int &newERES){
	eRes = newERES;
}
void Jewlry::setcRes(int &newCRES){
	cRes = newCRES;
}
void Jewlry::setchRes(int &newCHRES){
	chRes = newCHRES;
}
void Jewlry::setArmor(int &newArmor){
	armor = newArmor;
}
void Jewlry::setHp(int &newHp){
	hp = newHp;
}
void Jewlry::setEs(int &newEs){
	es = newEs;
}

void Jewlry::calcRating()
{
	rating = (eRes + fRes + cRes) * 1.6 + chRes * 2.1 + (armor * .3) + hp + es;
}

Loadout::Loadout() 
{
	totalRating = 0;
	numItems = 0;
	rating = 0;
	fRes = 0;
	eRes = 0;
	cRes = 0; //cold resistance
	chRes = 0;
	armor = 0;
	hp = 0;
	es = 0;
	DPS = 0.0;
	cost = 0;
	weapon = NULL;
	chest = NULL;
	gloves = NULL;
	helmet = NULL;
	boots = NULL;
	amulet = NULL;
	ring1 = NULL;
	ring2 = NULL;
	belt = NULL;
}
double Loadout::getDPS(){
	return DPS;
}
int Loadout::getItems(){
	return numItems;
}
int Loadout::getRating(){
	return totalRating;
}
int Loadout::getfRes() {
	return fRes;
}
int Loadout::geteRes() {
	return eRes;
}
int Loadout::getcRes() {
	return cRes;
}
int Loadout::getchRes() {
	return chRes;
}
int Loadout::getArmor() {
	return armor;
}
int Loadout::getHp() {
	return hp;
}
int Loadout::getEs() {
	return es;
}
int Loadout::getCost() {
	return cost;
}
void Loadout::addWeapon(Weapon *_weapon){
	weapon = _weapon;
	weapon->calcDPS();
	calcRating();
}
void Loadout::addHelmet(Armor *_helmet){
	helmet = _helmet;
	helmet->calcRating();
}
void Loadout::addBoots(Armor *_boots){
	boots = _boots;
	boots->calcRating();
}
void Loadout::addGloves(Armor *_gloves){
	gloves = _gloves;
	gloves->calcRating();
}
void Loadout::addChest(Armor *_chest){
	chest = _chest;
	chest->calcRating();
}
void Loadout::addRing1(Jewlry *_ring1){
	ring1 = _ring1;
	ring1->calcRating();
}
void Loadout::addRing2(Jewlry *_ring2){
	ring2 = _ring2;
	ring2->calcRating();
}
void Loadout::addBelt(Jewlry *_belt){
	belt = _belt;
	belt->calcRating();
}
void Loadout::addAmulet(Jewlry *_amulet){
	amulet = _amulet;
	amulet->calcRating();
}
void Loadout::calcRating(){
	double res;
	//(eRes + fRes + cRes) * 1.5 + chRes * 2 + (armor * .5) + hp + es;
	totalRating = hp + es + DPS + (armor * ((armor + 5 * minArmor) * 3 / (6 * minArmor * 10)));

	fRes < maxfRes ? res = fRes : res = maxfRes;
	totalRating += res * res / maxfRes * 1.6;

	eRes < maxeRes ? res = eRes : res = maxeRes;
	totalRating += res * res / maxeRes * 1.6;

	cRes < maxcRes ? res = cRes : res = maxcRes;
	totalRating += res * res / maxcRes * 1.6;

	chRes < maxchRes ? res = chRes : res = maxchRes;
	totalRating += res * (2 * maxchRes + res) * 2.1 /(3 * maxchRes);
}
void Loadout::calcDPS(){
	DPS = weapon->getDPS();
}
void Loadout::calcStats() {
	fRes = chest->getfRes() + helmet->getfRes() + boots->getfRes() + gloves->getfRes() + belt->getfRes() + amulet->getfRes() + ring1->getfRes() + ring2->getfRes();
	eRes = chest->geteRes() + helmet->geteRes() + boots->geteRes() + gloves->geteRes() + belt->geteRes() + amulet->geteRes() + ring1->geteRes() + ring2->geteRes();
	cRes = chest->getcRes() + helmet->getcRes() + boots->getcRes() + gloves->getcRes() + belt->getcRes() + amulet->getcRes() + ring1->getcRes() + ring2->getcRes();
	chRes = chest->getchRes() + helmet->getchRes() + boots->getchRes() + gloves->getchRes() + belt->getchRes() + amulet->getchRes() + ring1->getchRes() + ring2->getchRes();
	armor = chest->getArmor() + helmet->getArmor() + boots->getArmor() + gloves->getArmor() + belt->getArmor() + amulet->getArmor() + ring1->getArmor() + ring2->getArmor();
	hp = chest->getHp() + helmet->getHp() + boots->getHp() + gloves->getHp() + belt->getHp() + amulet->getHp() + ring1->getHp() + ring2->getHp();
	es = chest->getEs() + helmet->getEs() + boots->getEs() + gloves->getEs() + belt->getEs() + amulet->getEs() + ring1->getEs() + ring2->getEs();
	cost = chest->getCost() + helmet->getCost() + boots->getCost() + gloves->getCost() + belt->getCost() + amulet->getCost() + ring1->getCost() + ring2->getCost();
}
bool Loadout::meetsMinimums()
{
	//totalRating < minRating || 
	if (cost > maxCost || fRes < minfRes || eRes < mineRes || cRes < mincRes || chRes < minchRes || armor < minArmor || hp < minHp || es < minEs)
		return false;
	else
		return true;
}
void Loadout::printLoadout(ofstream& fout)
{
	fout << "Rating: " << totalRating << "  Cost: " << cost << "   DPS: " << DPS
		<< "\n\tHp: " << hp << "   Armor: " << armor << "   Shield: " << es
		<< "\n\tFire Res: " << fRes << "  Cold Res: " << cRes << "  Elec Res: " << eRes << "  Chaos Res: " << chRes << "\n\t"
		<< weapon->getName() << " " << helmet->getName() << " " << chest->getName() << " " << gloves->getName() << " " 
		<< boots->getName()	<< " " << amulet->getName() << " " << ring1->getName() << " " << ring2->getName() << " " << belt->getName() << "\n\n";
}

void Pool::readItems()
{
	ifstream fin;
	fin.open("items.txt");

	if (!fin)
	{
		cerr << "Can't open file.";
		system("pause");
		exit(1);
	}

	string name;
	float cost;
	int damage;
	double speed;
	int fRes, cRes, eRes, chRes, hp, armor, es, j;
	Weapon tempWeapon;
	Armor tempChest;
	Armor tempGloves;
	Armor tempBoots;
	Armor tempHelmet;
	Jewlry tempRing1;
	Jewlry tempRing2;
	Jewlry tempBelt;
	Jewlry tempAmulet;

	for (int i = 0; i < MAX; i++)
	{
		getline(fin, name);
		fin	>> cost >> damage >> speed;
		fin.ignore();
		tempWeapon.setName(name);
		tempWeapon.setCost(cost);
		tempWeapon.setDamage(damage);
		tempWeapon.setSpeed(speed);
		tempWeapon.calcRating();
		j = i;
		while (j > 0 && weaponPool[j-1].getRating() < tempWeapon.getRating())
		{
			weaponPool[j]=weaponPool[j-1];
			j--;
		}
		weaponPool[j]=tempWeapon;
	}
	for (int i = 0; i < MAX; i++)
	{
		getline(fin, name);
		fin >> cost >> fRes >> cRes >> eRes >> chRes >> armor >> hp;
		fin.ignore();
		tempHelmet.setName(name);
		tempHelmet.setCost(cost);
		tempHelmet.setfRes(fRes);
		tempHelmet.seteRes(eRes);
		tempHelmet.setcRes(cRes);
		tempHelmet.setchRes(chRes);
		tempHelmet.setArmor(armor);
		tempHelmet.setHp(hp);
		tempHelmet.calcRating();
		j = i;
		while (j > 0 && helmetPool[j - 1].getRating() < tempHelmet.getRating())
		{
			helmetPool[j]=helmetPool[j - 1];
			j--;
		}
		helmetPool[j]=tempHelmet;
	}
	for (int i = 0; i < MAX; i++)
	{
		getline(fin, name);
		fin >> cost >> fRes >> cRes >> eRes >> chRes >> armor >> hp;
		fin.ignore();
		tempGloves.setName(name);
		tempGloves.setCost(cost);
		tempGloves.setfRes(fRes);
		tempGloves.seteRes(eRes);
		tempGloves.setcRes(cRes);
		tempGloves.setchRes(chRes);
		tempGloves.setArmor(armor);
		tempGloves.setHp(hp);
		tempGloves.calcRating();
		j = i;
		while (j > 0 && glovesPool[j - 1].getRating() < tempGloves.getRating())
		{
			glovesPool[j]=glovesPool[j - 1];
			j--;
		}
		glovesPool[j]=tempGloves;
	}
	for (int i = 0; i < MAX; i++)
	{
		getline(fin, name);
		fin >> cost >> fRes >> cRes >> eRes >> chRes >> armor >> hp;
		fin.ignore();
		tempBoots.setName(name);
		tempBoots.setCost(cost);
		tempBoots.setfRes(fRes);
		tempBoots.seteRes(eRes);
		tempBoots.setcRes(cRes);
		tempBoots.setchRes(chRes);
		tempBoots.setArmor(armor);
		tempBoots.setHp(hp);
		tempBoots.calcRating();
		j = i;
		while (j > 0 && bootsPool[j - 1].getRating() < tempBoots.getRating())
		{
			bootsPool[j]=bootsPool[j-1];
			j--;
		}
		bootsPool[j]=tempBoots;
	}
	for (int i = 0; i < MAX; i++)
	{
		getline(fin, name);
		fin >> cost >> fRes >> cRes >> eRes >> chRes >> armor >> hp;
		fin.ignore();
		tempChest.setName(name);
		tempChest.setCost(cost);
		tempChest.setfRes(fRes);
		tempChest.seteRes(eRes);
		tempChest.setcRes(cRes);
		tempChest.setchRes(chRes);
		tempChest.setArmor(armor);
		tempChest.setHp(hp);
		tempChest.calcRating();
		j = i;
		while (j > 0 && chestPool[j - 1].getRating() < tempChest.getRating())
		{
			chestPool[j]=chestPool[j-1];
			j--;
		}
		chestPool[j]=tempChest;
	}
	for (int i = 0; i < MAX; i++)
	{
		getline(fin, name);
		fin >> cost >> fRes >> cRes >> eRes >> chRes >> armor >> hp;
		fin.ignore();
		tempRing1.setName(name);
		tempRing1.setCost(cost);
		tempRing1.setfRes(fRes);
		tempRing1.seteRes(eRes);
		tempRing1.setcRes(cRes);
		tempRing1.setchRes(chRes);
		tempRing1.setArmor(armor);
		tempRing1.setHp(hp);
		tempRing1.calcRating();
		j = i;
		while (j > 0 && ring1Pool[j - 1].getRating() < tempRing1.getRating())
		{
			ring1Pool[j]=ring1Pool[j-1];
			j--;
		}
		ring1Pool[j]=tempRing1;
	}
	for (int i = 0; i < MAX; i++)
	{
		getline(fin, name);
		fin >> cost >> fRes >> cRes >> eRes >> chRes >> armor >> hp;
		fin.ignore();
		tempRing2.setName(name);
		tempRing2.setCost(cost);
		tempRing2.setfRes(fRes);
		tempRing2.seteRes(eRes);
		tempRing2.setcRes(cRes);
		tempRing2.setchRes(chRes);
		tempRing2.setArmor(armor);
		tempRing2.setHp(hp);
		tempRing2.calcRating();
		j = i;
		while (j > 0 && ring2Pool[j - 1].getRating() < tempRing2.getRating())
		{
			ring2Pool[j]=ring2Pool[j-1];
			j--;
		}
		ring2Pool[j]=tempRing2;
	}
	for (int i = 0; i < MAX; i++)
	{
		getline(fin, name);
		fin >> cost >> fRes >> cRes >> eRes >> chRes >> armor >> hp;
		fin.ignore();
		tempAmulet.setName(name);
		tempAmulet.setCost(cost);
		tempAmulet.setfRes(fRes);
		tempAmulet.seteRes(eRes);
		tempAmulet.setcRes(cRes);
		tempAmulet.setchRes(chRes);
		tempAmulet.setArmor(armor);
		tempAmulet.setHp(hp);
		tempAmulet.calcRating();
		j = i;
		while (j > 0 && amuletPool[j - 1].getRating() < tempAmulet.getRating())
		{
			amuletPool[j]=amuletPool[j-1];
			j--;
		}
		amuletPool[j]=tempAmulet;
	}
	for (int i = 0; i < MAX; i++)
	{
		getline(fin, name);
		fin >> cost >> fRes >> cRes >> eRes >> chRes >> armor >> hp;
		fin.ignore();
		tempBelt.setName(name);
		tempBelt.setCost(cost);
		tempBelt.setfRes(fRes);
		tempBelt.seteRes(eRes);
		tempBelt.setcRes(cRes);
		tempBelt.setchRes(chRes);
		tempBelt.setArmor(armor);
		tempBelt.setHp(hp);
		tempBelt.calcRating();
		j = i;
		while (j > 0 && beltPool[j - 1].getRating() < tempBelt.getRating())
		{
			beltPool[j]=beltPool[j-1];
			j--;
		}
		beltPool[j]=tempBelt;
	}
	fin.close();
}

void Pool::printPool(ofstream& fout)
{
	int i;
	for (i = 0; i < MAX; i++)
		fout << weaponPool[i];
	fout << "\n";

	for (i = 0; i < MAX; i++)
		fout << helmetPool[i];
	fout << "\n";

	for (i = 0; i < MAX; i++)
		fout << glovesPool[i];
	fout << "\n";

	for (i = 0; i < MAX; i++)
		fout << bootsPool[i];
	fout << "\n";

	for (i = 0; i < MAX; i++)
		fout << chestPool[i];
	fout << "\n";

	for (i = 0; i < MAX; i++)
		fout << ring1Pool[i];
	fout << "\n";

	for (i = 0; i < MAX; i++)
		fout << ring2Pool[i];
	fout << "\n";

	for (i = 0; i < MAX; i++)
		fout << amuletPool[i];
	fout << "\n";

	for (i = 0; i < MAX; i++)
		fout << beltPool[i];
	fout << "\n";
}

void Pool::bestLoadouts(Loadout *loadouts)
{
	Loadout tempLoadout;
	int count = 0,b,c,d,e,f,g,h,i,t, rating = 0;

	typedef chrono::high_resolution_clock::time_point Timer;
	#define CLOCK chrono::high_resolution_clock
	#define DURATION chrono::duration_cast<chrono::milliseconds>
	Timer start;
	Timer end;
	bool worthy;
	tempLoadout.addWeapon(&weaponPool[0]);
	tempLoadout.calcDPS();
	//cout << chrono::high_resolution_clock::period::den << endl;
	const int MAXe = 8;
	long long duration = 0;
	start = CLOCK::now();
	for (b = 0; b < MAXe; b++)
	{
	tempLoadout.addHelmet(&helmetPool[b]);
		for (c = 0; c < MAXe; c++)
		{
		tempLoadout.addBoots(&bootsPool[c]);
			for (d = 0; d < MAXe; d++)
			{
			tempLoadout.addGloves(&glovesPool[d]);
				for (e = 0; e < MAXe; e++)
				{
				tempLoadout.addChest(&chestPool[e]);
					for (f = 0; f < MAXe; f++)
					{
					tempLoadout.addRing1(&ring1Pool[f]);
						for (g = 0; g < MAXe; g++)
						{
						tempLoadout.addRing2(&ring2Pool[g]);
							for (h = 0; h < MAXe; h++)
							{
							tempLoadout.addAmulet(&amuletPool[h]);
								for(i = 0; i < MAXe; i++)
								{		
									tempLoadout.addBelt(&beltPool[i]);/**/
									tempLoadout.calcStats();
									worthy = tempLoadout.meetsMinimums();
									if (worthy)
									{//NONE 115
										tempLoadout.calcRating();//HERE only 530
										rating = tempLoadout.getRating(); //HERE ONLY 290
										if(rating > minRating && rating > loadouts[MAX_LOADOUTS - 1].getRating())
										{
											t = count;
											while (t > 0 && loadouts[t - 1].getRating() < rating)//HERE only 240
											{
												loadouts[t] = loadouts[t - 1];//here only 240
												t--;
											}
											loadouts[t] = tempLoadout;//HERE only 530
											if (count < MAX_LOADOUTS - 1)	count++;
											//ALL 560
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	end = CLOCK::now();
	cout << DURATION(end - start).count() << '\n';
	/*
	start = CLOCK::now();
	end = CLOCK::now();
	duration = DURATION(end - start).count();
	cout << duration << '\n';*/
}


void printLoadouts(Loadout loadouts[], ofstream& fout)
{
	for (int i = 0; i < MAX_LOADOUTS; i++)
	{
		fout << i+1 << ". ";
		loadouts[i].printLoadout(fout);
	}
}